version: "3"

volumes:
  local_postgres_data: {}
  local_minio_data: {}
  local_mongo_data: {}
  local_postgres_data_backups: {}
  node_modules: {}

services:
  traefik:
    image: "traefik:latest"
    container_name: traefik
    hostname: traefik
    command:
      #     - "--log.level=DEBUG"
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.docker.exposedByDefault=false
      - --api
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "/var/log/traefik/:/var/log/traefik/"
    labels:
      - "traefik.enable=true"
      # Dashboard
      # - "traefik.docker.network=proxy"
      # - "traefik.http.middlewares.test-stripprefix.stripprefix.prefixes=/"
      # # Dashboard private
      # - "traefik.http.routers.dashtr.service=api@internal"
      # - "traefik.http.routers.dashtr.entrypoints=metrics"
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # middleware api protect
      # auth middleware
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth:6060/auth"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-Connected"
        # Here, an average of 100 requests per second is allowed.
        # In addition, a burst of 50 requests is allowed.
      - "traefik.http.middlewares.ratelimit-middleware.ratelimit.average=100"
      - "traefik.http.middlewares.ratelimit-middleware.ratelimit.burst=50"
        # Middleware strip prefix for /api
      - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/api"
        # we chain rate limit with auth middleware
      - "traefik.http.middlewares.apiprotect.chain.middlewares=ratelimit-middleware,auth-middleware,stripprefix"

  frontend:
    build:
      context: .
      dockerfile: ./Docker/local/frontend/Dockerfile
    image: cesi_logiciel_local_frontend
    container_name: frontend
    restart: always
    volumes:
      - ./frontend:/app
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`webserver.cesu.local`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"

    command: npm run serve

  mongo:
    container_name: mongo-dev
    image: mongo:latest
    restart: always
    env_file:
      - ./envs/local/.mongodb
      # Aujourd'hui nous n'avons qu'une seule database,
      # si nous en voulons plusieurs nous devons r√©aliser un script d'initialisation
      # Lien : https://onexlab-io.medium.com/docker-mongodb-multiple-databases-62a685c4352a
    # ports:
    #   - "48151:27017"
    volumes:
      - local_mongo_data:/data/db

  auth:
    build:
      context: .
      dockerfile: ./Docker/local/auth/Dockerfile
    image: cesi_logiciel_local_auth
    container_name: auth
    restart: always
    depends_on:
      - mongo
    volumes:
      - ./backend/auth:/app
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    env_file:
      - ./envs/local/.mongodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`webserver.cesu.local`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.service=auth"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.services.auth.loadbalancer.server.port=6060"

      # # Middleware to remore /api
      # - "traefik.http.routers.auth.middlewares=stripprefix"

    command: npm run dev
    # ports:
    #   - "6060:6060"

  microservice:
    build:
      context: .
      dockerfile: ./Docker/local/microservice/Dockerfile
    image: cesi_logiciel_local_microservice
    container_name: microservice
    restart: always
    depends_on:
      - mongo
    volumes:
      - ./backend/microservice:/app
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    env_file:
      - ./envs/local/.mongodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice.rule=Host(`webserver.cesu.local`) && PathPrefix(`/api`)"
      - "traefik.http.routers.microservice.service=microservice"
      - "traefik.http.routers.microservice.tls=true"
      - "traefik.http.routers.microservice.entrypoints=websecure"
      - "traefik.http.services.microservice.loadbalancer.server.port=6060"

      # Authentication middleware
      - "traefik.http.routers.microservice.middlewares=apiprotect"

    command: npm run dev
    # ports:
    #   - "6060:6060"

  whoami:
    image: containous/whoami:latest
    # ports:
    #   - 8000:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.protected.rule=Host(`webserver.cesu.local`) && PathPrefix(`/api/protected`)"
      - "traefik.http.routers.protected.service=protected"
      - "traefik.http.routers.protected.tls=true"
      - "traefik.http.routers.protected.entrypoints=websecure"
      - "traefik.http.services.protected.loadbalancer.server.port=80"

      # Authentication middleware
      # - "traefik.http.routers.protected.middlewares=apiprotect"


  minio:
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - local_minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio_secret_key
    command: server /data --console-address ":9001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`data.webserver.cesu.local`)"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"

#  doc pour le challenge cyber
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: "swagger-ui"
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./openapi.yaml:/openapi.yaml
    environment:
      SWAGGER_JSON: /openapi.yaml
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.doc.rule=Host(`docs.docker.localhost`)"
    #   - "traefik.http.routers.doc.service=doc"
    #   - "traefik.http.routers.doc.tls=true"
    #   - "traefik.http.routers.doc.entrypoints=websecure"
    #   - "traefik.http.services.doc.loadbalancer.server.port=8080"
